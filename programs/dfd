import numpy as np
from tensorflow.image import resize
from matplotlib import pyplot as plt
from tensorflow.keras.models import Model
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.applications import VGG19
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.layers import Flatten, Dense, Conv2D, MaxPooling2D, Dropout

(xtrain, ytrain), (xtest, ytest) = mnist.load_data()
xtrain = np.expand_dims(xtrain, -1)
xtest = np.expand_dims(xtest, -1)
xtrain = np.repeat(xtrain, 3, axis=-1)
xtest = np.repeat(xtest, 3, axis=-1)
xtrain = resize(xtrain, (32,32))
xtest = resize(xtest, (32,32))
xtrain, xtest = xtrain / 255.0, xtest / 255.0
ytrain, ytest = to_categorical(ytrain), to_categorical(ytest)

vgg = VGG19(weights='imagenet',input_shape=(32,32,3), include_top=False)
for layer in vgg.layers:
    layer.trainable = False

layer_2 = Flatten()(vgg.output)
layer_3 = Dense(512, activation='relu')(layer_2)
output = Dense(10, activation='sigmoid')(layer_3)

model = Model(inputs=vgg.input, outputs = output)
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(
    xtrain, ytrain,
    batch_size=32,
    epochs=5,
    validation_data=(xtest, ytest)
)
